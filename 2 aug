import java.util.*;

class Solution {
    public int longestSubarray(int[] arr, int k) {
        int n = arr.length;

        // Step 1: Convert arr[] to +1 / -1
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = arr[i] > k ? 1 : -1;
        }

        // Step 2: Find longest subarray with positive sum
        Map<Integer, Integer> prefixIndex = new HashMap<>();
        int prefixSum = 0;
        int maxLen = 0;

        for (int i = 0; i < n; i++) {
            prefixSum += nums[i];

            // If sum is positive from 0 to i
            if (prefixSum > 0) {
                maxLen = i + 1;
            } else {
                // Store first occurrence of prefixSum
                if (!prefixIndex.containsKey(prefixSum)) {
                    prefixIndex.put(prefixSum, i);
                }

                // If (prefixSum - 1) is seen before, we can try to find a subarray that ends here
                if (prefixIndex.containsKey(prefixSum - 1)) {
                    int len = i - prefixIndex.get(prefixSum - 1);
                    maxLen = Math.max(maxLen, len);
                }
            }
        }

        return maxLen;
    }
}

//
//Longest Subarray with Majority Greater than K
Difficulty: MediumAccuracy: 52.63%Submissions: 24K+Points: 4
Given an array arr[] and an integer k, the task is to find the length of longest subarray in which the count of elements greater than k is more than the count of elements less than or equal to k.

Examples:

Input: arr[] = [1, 2, 3, 4, 1], k = 2
Output: 3
Explanation: The subarray [2, 3, 4] or [3, 4, 1] satisfy the given condition, and there is no subarray of length 4 or 5 which will hold the given condition, so the answer is 3.
Input: arr[] = [6, 5, 3, 4], k = 2
Output: 4
Explanation: In the subarray [6, 5, 3, 4], there are 4 elements > 2 and 0 elements <= 2, so it is the longest subarray.// //
