class Solution {
    static final int MOD = 1_000_000_007;

    public int[] productQueries(int n, int[][] queries) {
        // Step 1: Build powers array
        List<Integer> powersList = new ArrayList<>();
        int bit = 0;
        while (n > 0) {
            if ((n & 1) == 1) {
                powersList.add(1 << bit);
            }
            bit++;
            n >>= 1;
        }
        // Convert to array
        int m = powersList.size();
        int[] powers = new int[m];
        for (int i = 0; i < m; i++) {
            powers[i] = powersList.get(i);
        }

        // Step 2: Build prefix product array
        long[] prefix = new long[m];
        prefix[0] = powers[0];
        for (int i = 1; i < m; i++) {
            prefix[i] = (prefix[i-1] * powers[i]) % MOD;
        }

        // Step 3: Answer queries
        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int L = queries[i][0];
            int R = queries[i][1];

            if (L == 0) {
                ans[i] = (int) prefix[R];
            } else {
                long numerator = prefix[R];
                long denominator = modPow(prefix[L-1], MOD - 2, MOD);
                ans[i] = (int) ((numerator * denominator) % MOD);
            }
        }

        return ans;
    }

    // Fast modular exponentiation
    private long modPow(long base, long exp, int mod) {
        long res = 1;
        while (exp > 0) {
            if ((exp & 1) == 1) {
                res = (res * base) % mod;
            }
            base = (base * base) % mod;
            exp >>= 1;
        }
        return res;
    }
}


//2438. Range Product Queries of Powers
Solved
Medium
Topics
premium lock icon
Companies
Hint
Given a positive integer n, there exists a 0-indexed array called powers, composed of the minimum number of powers of 2 that sum to n. The array is sorted in non-decreasing order, and there is only one way to form the array.

You are also given a 0-indexed 2D integer array queries, where queries[i] = [lefti, righti]. Each queries[i] represents a query where you have to find the product of all powers[j] with lefti <= j <= righti.

Return an array answers, equal in length to queries, where answers[i] is the answer to the ith query. Since the answer to the ith query may be too large, each answers[i] should be returned modulo 109 + 7.

 

Example 1:

Input: n = 15, queries = [[0,1],[2,2],[0,3]]
Output: [2,4,64]
Explanation:
For n = 15, powers = [1,2,4,8]. It can be shown that powers cannot be a smaller size.
Answer to 1st query: powers[0] * powers[1] = 1 * 2 = 2.
Answer to 2nd query: powers[2] = 4.
Answer to 3rd query: powers[0] * powers[1] * powers[2] * powers[3] = 1 * 2 * 4 * 8 = 64.
Each answer modulo 109 + 7 yields the same answer, so [2,4,64] is returned.
