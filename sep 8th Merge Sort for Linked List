class Solution {
    public Node mergeSort(Node head) {
        // Base case: if list is empty or single node
        if (head == null || head.next == null) {
            return head;
        }

        // Step 1: Find the middle of the linked list
        Node mid = getMiddle(head);
        Node rightHead = mid.next;
        mid.next = null; // split into two halves

        // Step 2: Recursively sort both halves
        Node left = mergeSort(head);
        Node right = mergeSort(rightHead);

        // Step 3: Merge the two sorted halves
        return merge(left, right);
    }

    // Utility to merge two sorted linked lists
    private Node merge(Node a, Node b) {
        Node dummy = new Node(0);
        Node tail = dummy;

        while (a != null && b != null) {
            if (a.data <= b.data) {
                tail.next = a;
                a = a.next;
            } else {
                tail.next = b;
                b = b.next;
            }
            tail = tail.next;
        }

        // Attach remaining nodes
        if (a != null) tail.next = a;
        else tail.next = b;

        return dummy.next;
    }

    // Utility to find the middle node (slow-fast pointer)
    private Node getMiddle(Node head) {
        Node slow = head, fast = head;

        // fast.next != null && fast.next.next != null
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow; // middle node
    }
}



//Merge Sort for Linked List
