class Solution {
    public Node reverse(Node head) {
        if (head == null) return null;

        Node curr = head;
        Node temp = null;

        // Traverse and swap prev/next for each node
        while (curr != null) {
            // swap prev and next
            temp = curr.prev;
            curr.prev = curr.next;
            curr.next = temp;

            // move to "next" node (which is actually prev before swap)
            curr = curr.prev;
        }

        // temp will be at the node before new head
        if (temp != null) {
            head = temp.prev; 
        }

        return head;
    }
}



//  Reverse a Doubly Linked List
